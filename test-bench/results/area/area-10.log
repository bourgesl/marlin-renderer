# JMH version: 1.34
# VM version: JDK 17.0.1, OpenJDK 64-Bit Server VM, 17.0.1+12-LTS
# VM invoker: /home/bourgesl/apps/zulu17.30.15-ca-fx-jdk17.0.1-linux_x64/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation --add-modules=java.desktop --add-exports=java.desktop/sun.java2d.marlin=ALL-UNNAMED --patch-module=java.desktop=/home/marlin/branches/marlin-jdk/test-bench/../target/marlin-0.9.4.5-Unsafe-OpenJDK11.jar
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.marlin.bench.AreaSubtractBenchmark.doClip
# Parameters: (length = 10)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: Random seed: 3447667858947863824
133544.164 ±(99.9%) 251836.921 us/op
# Warmup Iteration   2: Random seed: 3447667858947863824
11617.927 ±(99.9%) 11556.827 us/op
# Warmup Iteration   3: Random seed: 3447667858947863824
4271.502 ±(99.9%) 2038.447 us/op
# Warmup Iteration   4: Random seed: 3447667858947863824
1728.785 ±(99.9%) 366.427 us/op
# Warmup Iteration   5: Random seed: 3447667858947863824
1307.746 ±(99.9%) 10.721 us/op
Iteration   1: Random seed: 3447667858947863824
1349.682 ±(99.9%) 126.711 us/op
                 doClip·p0.00:   1280.000 us/op
                 doClip·p0.50:   1290.240 us/op
                 doClip·p0.90:   1363.968 us/op
                 doClip·p0.95:   1452.442 us/op
                 doClip·p0.99:   1507.328 us/op
                 doClip·p0.999:  2886.627 us/op
                 doClip·p0.9999: 143392.768 us/op
                 doClip·p1.00:   143392.768 us/op

Iteration   2: Random seed: 3447667858947863824
1292.501 ±(99.9%) 1.134 us/op
                 doClip·p0.00:   1277.952 us/op
                 doClip·p0.50:   1290.240 us/op
                 doClip·p0.90:   1296.384 us/op
                 doClip·p0.95:   1298.432 us/op
                 doClip·p0.99:   1366.016 us/op
                 doClip·p0.999:  1727.457 us/op
                 doClip·p0.9999: 1806.336 us/op
                 doClip·p1.00:   1806.336 us/op

Iteration   3: Random seed: 3447667858947863824
1289.809 ±(99.9%) 0.855 us/op
                 doClip·p0.00:   1277.952 us/op
                 doClip·p0.50:   1288.192 us/op
                 doClip·p0.90:   1294.336 us/op
                 doClip·p0.95:   1296.384 us/op
                 doClip·p0.99:   1304.576 us/op
                 doClip·p0.999:  1618.688 us/op
                 doClip·p0.9999: 1892.352 us/op
                 doClip·p1.00:   1892.352 us/op

Iteration   4: Random seed: 3447667858947863824
1299.835 ±(99.9%) 3.368 us/op
                 doClip·p0.00:   1280.000 us/op
                 doClip·p0.50:   1290.240 us/op
                 doClip·p0.90:   1312.768 us/op
                 doClip·p0.95:   1363.968 us/op
                 doClip·p0.99:   1392.640 us/op
                 doClip·p0.999:  1684.945 us/op
                 doClip·p0.9999: 4808.704 us/op
                 doClip·p1.00:   4808.704 us/op

Iteration   5: Random seed: 3447667858947863824
1289.802 ±(99.9%) 0.813 us/op
                 doClip·p0.00:   1277.952 us/op
                 doClip·p0.50:   1288.192 us/op
                 doClip·p0.90:   1294.336 us/op
                 doClip·p0.95:   1296.384 us/op
                 doClip·p0.99:   1300.480 us/op
                 doClip·p0.999:  1627.144 us/op
                 doClip·p0.9999: 1861.632 us/op
                 doClip·p1.00:   1861.632 us/op



Result "org.marlin.bench.AreaSubtractBenchmark.doClip":
  N = 19151
  mean =   1303.923 ±(99.9%) 24.467 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 19150 
    [ 12500.000,  25000.000) = 0 
    [ 25000.000,  37500.000) = 0 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 0 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 0 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 0 
    [137500.000, 150000.000) = 1 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1277.952 us/op
     p(50.0000) =   1290.240 us/op
     p(90.0000) =   1298.432 us/op
     p(95.0000) =   1345.536 us/op
     p(99.0000) =   1491.927 us/op
     p(99.9000) =   1667.875 us/op
     p(99.9900) =  18584.909 us/op
     p(99.9990) = 143392.768 us/op
     p(99.9999) = 143392.768 us/op
    p(100.0000) = 143392.768 us/op


# JMH version: 1.34
# VM version: JDK 17.0.1, OpenJDK 64-Bit Server VM, 17.0.1+12-LTS
# VM invoker: /home/bourgesl/apps/zulu17.30.15-ca-fx-jdk17.0.1-linux_x64/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation --add-modules=java.desktop --add-exports=java.desktop/sun.java2d.marlin=ALL-UNNAMED --patch-module=java.desktop=/home/marlin/branches/marlin-jdk/test-bench/../target/marlin-0.9.4.5-Unsafe-OpenJDK11.jar
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.marlin.bench.AreaSubtractBenchmark.doClipTwice
# Parameters: (length = 10)

# Run progress: 50.00% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: Random seed: 3447667858947863824
4798283.776 us/op
# Warmup Iteration   2: Random seed: 3447667858947863824
3670016.000 us/op
# Warmup Iteration   3: Random seed: 3447667858947863824
3674210.304 us/op
# Warmup Iteration   4: Random seed: 3447667858947863824
3682598.912 us/op
# Warmup Iteration   5: Random seed: 3447667858947863824
3665821.696 us/op
Iteration   1: Random seed: 3447667858947863824
3718250.496 us/op
                 doClipTwice·p0.00:   3644850.176 us/op
                 doClipTwice·p0.50:   3718250.496 us/op
                 doClipTwice·p0.90:   3791650.816 us/op
                 doClipTwice·p0.95:   3791650.816 us/op
                 doClipTwice·p0.99:   3791650.816 us/op
                 doClipTwice·p0.999:  3791650.816 us/op
                 doClipTwice·p0.9999: 3791650.816 us/op
                 doClipTwice·p1.00:   3791650.816 us/op

Iteration   2: Random seed: 3447667858947863824
3644850.176 us/op
                 doClipTwice·p0.00:   3636461.568 us/op
                 doClipTwice·p0.50:   3644850.176 us/op
                 doClipTwice·p0.90:   3653238.784 us/op
                 doClipTwice·p0.95:   3653238.784 us/op
                 doClipTwice·p0.99:   3653238.784 us/op
                 doClipTwice·p0.999:  3653238.784 us/op
                 doClipTwice·p0.9999: 3653238.784 us/op
                 doClipTwice·p1.00:   3653238.784 us/op

Iteration   3: Random seed: 3447667858947863824
3709861.888 us/op
                 doClipTwice·p0.00:   3640655.872 us/op
                 doClipTwice·p0.50:   3709861.888 us/op
                 doClipTwice·p0.90:   3779067.904 us/op
                 doClipTwice·p0.95:   3779067.904 us/op
                 doClipTwice·p0.99:   3779067.904 us/op
                 doClipTwice·p0.999:  3779067.904 us/op
                 doClipTwice·p0.9999: 3779067.904 us/op
                 doClipTwice·p1.00:   3779067.904 us/op

Iteration   4: Random seed: 3447667858947863824
3619684.352 us/op
                 doClipTwice·p0.00:   3607101.440 us/op
                 doClipTwice·p0.50:   3619684.352 us/op
                 doClipTwice·p0.90:   3632267.264 us/op
                 doClipTwice·p0.95:   3632267.264 us/op
                 doClipTwice·p0.99:   3632267.264 us/op
                 doClipTwice·p0.999:  3632267.264 us/op
                 doClipTwice·p0.9999: 3632267.264 us/op
                 doClipTwice·p1.00:   3632267.264 us/op

Iteration   5: Random seed: 3447667858947863824
3634364.416 us/op
                 doClipTwice·p0.00:   3632267.264 us/op
                 doClipTwice·p0.50:   3634364.416 us/op
                 doClipTwice·p0.90:   3636461.568 us/op
                 doClipTwice·p0.95:   3636461.568 us/op
                 doClipTwice·p0.99:   3636461.568 us/op
                 doClipTwice·p0.999:  3636461.568 us/op
                 doClipTwice·p0.9999: 3636461.568 us/op
                 doClipTwice·p1.00:   3636461.568 us/op



Result "org.marlin.bench.AreaSubtractBenchmark.doClipTwice":
  N = 10
  mean = 3665402.266 ±(99.9%) 97344.081 us/op

  Histogram, us/op:
    [3600000.000, 3612500.000) = 1 
    [3612500.000, 3625000.000) = 0 
    [3625000.000, 3637500.000) = 4 
    [3637500.000, 3650000.000) = 2 
    [3650000.000, 3662500.000) = 1 
    [3662500.000, 3675000.000) = 0 
    [3675000.000, 3687500.000) = 0 
    [3687500.000, 3700000.000) = 0 
    [3700000.000, 3712500.000) = 0 
    [3712500.000, 3725000.000) = 0 
    [3725000.000, 3737500.000) = 0 
    [3737500.000, 3750000.000) = 0 
    [3750000.000, 3762500.000) = 0 
    [3762500.000, 3775000.000) = 0 
    [3775000.000, 3787500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 3607101.440 us/op
     p(50.0000) = 3638558.720 us/op
     p(90.0000) = 3790392.525 us/op
     p(95.0000) = 3791650.816 us/op
     p(99.0000) = 3791650.816 us/op
     p(99.9000) = 3791650.816 us/op
     p(99.9900) = 3791650.816 us/op
     p(99.9990) = 3791650.816 us/op
     p(99.9999) = 3791650.816 us/op
    p(100.0000) = 3791650.816 us/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              (length)    Mode    Cnt        Score       Error  Units
AreaSubtractBenchmark.doClip                                 10  sample  19151     1303.923 ±    24.467  us/op
AreaSubtractBenchmark.doClip:doClip·p0.00                    10  sample            1277.952              us/op
AreaSubtractBenchmark.doClip:doClip·p0.50                    10  sample            1290.240              us/op
AreaSubtractBenchmark.doClip:doClip·p0.90                    10  sample            1298.432              us/op
AreaSubtractBenchmark.doClip:doClip·p0.95                    10  sample            1345.536              us/op
AreaSubtractBenchmark.doClip:doClip·p0.99                    10  sample            1491.927              us/op
AreaSubtractBenchmark.doClip:doClip·p0.999                   10  sample            1667.875              us/op
AreaSubtractBenchmark.doClip:doClip·p0.9999                  10  sample           18584.909              us/op
AreaSubtractBenchmark.doClip:doClip·p1.00                    10  sample          143392.768              us/op
AreaSubtractBenchmark.doClipTwice                            10  sample     10  3665402.266 ± 97344.081  us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.00          10  sample         3607101.440              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.50          10  sample         3638558.720              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.90          10  sample         3790392.525              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.95          10  sample         3791650.816              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.99          10  sample         3791650.816              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.999         10  sample         3791650.816              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p0.9999        10  sample         3791650.816              us/op
AreaSubtractBenchmark.doClipTwice:doClipTwice·p1.00          10  sample         3791650.816              us/op
